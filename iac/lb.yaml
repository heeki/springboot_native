AWSTemplateFormatVersion: "2010-09-09"
Description: APIGW NLB ALB ECS load balancers
Parameters:
  pDomainName:
    Type: String
  pZoneId:
    Type: String
  pVpcId:
    Type: String
  pSubnetIds:
    Type: List<String>
  pIngressCidr:
    Type: String
  pIngressBastion:
    Type: String
  pCertArn:
    Type: String
  pNLBIps:
    Type: List<String>
  pALBIps:
    Type: List<String>
Resources:
  # Security Groups
  AppSGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref pIngressBastion
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join ["/", [!Select [0, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join ["/", [!Select [1, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join ["/", [!Select [2, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join ["/", [!Select [3, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref pIngressBastion
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join ["/", [!Select [0, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join ["/", [!Select [1, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join ["/", [!Select [2, !Ref pNLBIps], "32"]]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join ["/", [!Select [3, !Ref pNLBIps], "32"]]
  TaskSGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref AppSGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref pIngressBastion
  # NLB
  NetLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      Subnets: !Ref pSubnetIds
      Type: network
  NetListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref NetTargets80
          Type: forward
      LoadBalancerArn: !Ref NetLB
      Port: 80
      Protocol: TCP
  NetTargets80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: "TCP"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Select [0, !Ref pALBIps]
        - Id: !Select [1, !Ref pALBIps]
        - Id: !Select [2, !Ref pALBIps]
        - Id: !Select [3, !Ref pALBIps]
      TargetType: ip
      VpcId: !Ref pVpcId
  NetListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref NetTargets
          Type: forward
      LoadBalancerArn: !Ref NetLB
      Port: 443
      Protocol: TCP
  NetTargets:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: "TCP"
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 443
      Protocol: TCP
      Targets:
        - Id: !Select [0, !Ref pALBIps]
        - Id: !Select [1, !Ref pALBIps]
        - Id: !Select [2, !Ref pALBIps]
        - Id: !Select [3, !Ref pALBIps]
      TargetType: ip
      VpcId: !Ref pVpcId
  # ALB
  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      SecurityGroups:
        - !Ref AppSGroup
      Subnets: !Ref pSubnetIds
      Type: application
  AppListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref AppTargets
          Type: forward
      LoadBalancerArn: !Ref AppLB
      Port: 80
      Protocol: HTTP
  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref pCertArn
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref AppTargets
          Type: forward
      LoadBalancerArn: !Ref AppLB
      Port: 443
      Protocol: HTTPS
  AppTargets:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: "/customer"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref pVpcId
  # Route53
  AppAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref pZoneId
      Name: !Ref pDomainName
      ResourceRecords:
        - !GetAtt AppLB.DNSName
      TTL: 300
      Type: CNAME
Outputs:
  outAppSGroup:
    Value: !Ref AppSGroup
  outTaskSGroup:
    Value: !Ref TaskSGroup
  outAppLB:
    Value: !Ref AppLB
  outAppLBDNSName:
    Value: !GetAtt AppLB.DNSName
  outAppTargets:
    Value: !Ref AppTargets
